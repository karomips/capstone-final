{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\capstone-final\\\\client\\\\src\\\\user\\\\components\\\\RoleProtectedRoute.jsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoleProtectedRoute = ({\n  children,\n  requiredRole,\n  redirectTo = '/user/login'\n}) => {\n  const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\n  const token = localStorage.getItem('token');\n  const user = JSON.parse(localStorage.getItem('user') || '{}');\n  const userRole = user.role || 'user';\n\n  // Check if user is logged in\n  if (!isLoggedIn || !token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: redirectTo,\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if user has required role\n  if (requiredRole && userRole !== requiredRole) {\n    // Redirect based on user's actual role\n    if (userRole === 'admin') {\n      window.location.href = 'http://localhost:3001'; // Admin app\n      return null;\n    } else {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/user/home\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 14\n      }, this);\n    }\n  }\n  return children;\n};\n_c = RoleProtectedRoute;\nexport default RoleProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"RoleProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","RoleProtectedRoute","children","requiredRole","redirectTo","isLoggedIn","localStorage","getItem","token","user","JSON","parse","userRole","role","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","window","location","href","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/capstone-final/client/src/user/components/RoleProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst RoleProtectedRoute = ({ children, requiredRole, redirectTo = '/user/login' }) => {\r\n  const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\r\n  const token = localStorage.getItem('token');\r\n  const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n  const userRole = user.role || 'user';\r\n\r\n  // Check if user is logged in\r\n  if (!isLoggedIn || !token) {\r\n    return <Navigate to={redirectTo} replace />;\r\n  }\r\n\r\n  // Check if user has required role\r\n  if (requiredRole && userRole !== requiredRole) {\r\n    // Redirect based on user's actual role\r\n    if (userRole === 'admin') {\r\n      window.location.href = 'http://localhost:3001'; // Admin app\r\n      return null;\r\n    } else {\r\n      return <Navigate to=\"/user/home\" replace />;\r\n    }\r\n  }\r\n\r\n  return children;\r\n};\r\n\r\nexport default RoleProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,YAAY;EAAEC,UAAU,GAAG;AAAc,CAAC,KAAK;EACrF,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,MAAM;EAChE,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAME,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;EAC7D,MAAMK,QAAQ,GAAGH,IAAI,CAACI,IAAI,IAAI,MAAM;;EAEpC;EACA,IAAI,CAACR,UAAU,IAAI,CAACG,KAAK,EAAE;IACzB,oBAAOR,OAAA,CAACF,QAAQ;MAACgB,EAAE,EAAEV,UAAW;MAACW,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7C;;EAEA;EACA,IAAIhB,YAAY,IAAIS,QAAQ,KAAKT,YAAY,EAAE;IAC7C;IACA,IAAIS,QAAQ,KAAK,OAAO,EAAE;MACxBQ,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,uBAAuB,CAAC,CAAC;MAChD,OAAO,IAAI;IACb,CAAC,MAAM;MACL,oBAAOtB,OAAA,CAACF,QAAQ;QAACgB,EAAE,EAAC,YAAY;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC7C;EACF;EAEA,OAAOjB,QAAQ;AACjB,CAAC;AAACqB,EAAA,GAvBItB,kBAAkB;AAyBxB,eAAeA,kBAAkB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}