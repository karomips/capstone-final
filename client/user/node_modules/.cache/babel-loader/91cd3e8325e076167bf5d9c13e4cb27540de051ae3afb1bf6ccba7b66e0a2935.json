{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\capstone-final\\\\user\\\\src\\\\components\\\\Messages\\\\Messages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './Messages.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Messages() {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [users, setUsers] = useState([]);\n  const [showNewChat, setShowNewChat] = useState(false);\n  const [selectedUser, setSelectedUser] = useState('');\n  const scrollRef = useRef();\n  const currentUser = JSON.parse(localStorage.getItem('user'));\n  useEffect(() => {\n    const fetchConversations = async () => {\n      try {\n        const res = await axios.get(`http://localhost:5000/api/conversations/${currentUser.email}`);\n        setConversations(res.data);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching conversations:', err);\n        setLoading(false);\n      }\n    };\n    const fetchUsers = async () => {\n      try {\n        const res = await axios.get('http://localhost:5000/api/users/list');\n        if (res.data.success) {\n          // Filter out current user\n          const otherUsers = res.data.users.filter(user => user.email !== currentUser.email);\n          setUsers(otherUsers);\n        }\n      } catch (err) {\n        console.error('Error fetching users:', err);\n      }\n    };\n    fetchConversations();\n    fetchUsers();\n  }, [currentUser.email]);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        if (currentChat) {\n          const res = await axios.get(`http://localhost:5000/api/messages/${currentChat._id}`);\n          setMessages(res.data);\n        }\n      } catch (err) {\n        console.error('Error fetching messages:', err);\n      }\n    };\n    fetchMessages();\n  }, [currentChat]);\n  useEffect(() => {\n    var _scrollRef$current;\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n    const message = {\n      conversationId: currentChat._id,\n      sender: currentUser.email,\n      text: newMessage\n    };\n    try {\n      const res = await axios.post('http://localhost:5000/api/messages', message);\n      setMessages([...messages, res.data]);\n      setNewMessage('');\n\n      // Refresh conversations to update last message\n      const conversationsRes = await axios.get(`http://localhost:5000/api/conversations/${currentUser.email}`);\n      setConversations(conversationsRes.data);\n    } catch (err) {\n      console.error('Error sending message:', err);\n    }\n  };\n  const startNewConversation = async () => {\n    if (!selectedUser) return;\n    try {\n      const res = await axios.post('http://localhost:5000/api/conversations', {\n        members: [currentUser.email, selectedUser]\n      });\n      setCurrentChat(res.data);\n      setShowNewChat(false);\n      setSelectedUser('');\n\n      // Refresh conversations list\n      const conversationsRes = await axios.get(`http://localhost:5000/api/conversations/${currentUser.email}`);\n      setConversations(conversationsRes.data);\n    } catch (err) {\n      console.error('Error creating conversation:', err);\n    }\n  };\n  const getOtherMember = conversation => {\n    return conversation.members.find(member => member !== currentUser.email);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-menu-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-loading\",\n        children: \"Loading conversations...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversations-list\",\n        children: conversations.map(conv => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `conversation-item ${(currentChat === null || currentChat === void 0 ? void 0 : currentChat._id) === conv._id ? 'active' : ''}`,\n          onClick: () => setCurrentChat(conv),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-name\",\n            children: conv.members.find(member => member !== currentUser.email)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-preview\",\n            children: conv.lastMessage || 'No messages yet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)]\n        }, conv._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-chat\",\n      children: currentChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: currentChat.members.find(member => member !== currentUser.email)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: scrollRef,\n            className: `message ${message.sender === currentUser.email ? 'own' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-time\",\n                children: new Date(message.createdAt).toLocaleTimeString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this)\n          }, message._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"chat-input-container\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type a message...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            className: \"chat-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-chat-selected\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a conversation to start messaging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(Messages, \"DceFrv5UWyb45Zrwe2qXlRuW6GQ=\");\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Messages","_s","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","newMessage","setNewMessage","loading","setLoading","users","setUsers","showNewChat","setShowNewChat","selectedUser","setSelectedUser","scrollRef","currentUser","JSON","parse","localStorage","getItem","fetchConversations","res","get","email","data","err","console","error","fetchUsers","success","otherUsers","filter","user","fetchMessages","_id","_scrollRef$current","current","scrollIntoView","behavior","handleSubmit","e","preventDefault","trim","message","conversationId","sender","text","post","conversationsRes","startNewConversation","members","getOtherMember","conversation","find","member","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","conv","onClick","lastMessage","ref","Date","createdAt","toLocaleTimeString","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/capstone-final/user/src/components/Messages/Messages.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './Messages.css';\r\n\r\nfunction Messages() {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [currentChat, setCurrentChat] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [users, setUsers] = useState([]);\r\n  const [showNewChat, setShowNewChat] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState('');\r\n  const scrollRef = useRef();\r\n  const currentUser = JSON.parse(localStorage.getItem('user'));\r\n\r\n  useEffect(() => {\r\n    const fetchConversations = async () => {\r\n      try {\r\n        const res = await axios.get(`http://localhost:5000/api/conversations/${currentUser.email}`);\r\n        setConversations(res.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching conversations:', err);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    const fetchUsers = async () => {\r\n      try {\r\n        const res = await axios.get('http://localhost:5000/api/users/list');\r\n        if (res.data.success) {\r\n          // Filter out current user\r\n          const otherUsers = res.data.users.filter(user => user.email !== currentUser.email);\r\n          setUsers(otherUsers);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching users:', err);\r\n      }\r\n    };\r\n\r\n    fetchConversations();\r\n    fetchUsers();\r\n  }, [currentUser.email]);\r\n\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        if (currentChat) {\r\n          const res = await axios.get(`http://localhost:5000/api/messages/${currentChat._id}`);\r\n          setMessages(res.data);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching messages:', err);\r\n      }\r\n    };\r\n    fetchMessages();\r\n  }, [currentChat]);\r\n\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim()) return;\r\n\r\n    const message = {\r\n      conversationId: currentChat._id,\r\n      sender: currentUser.email,\r\n      text: newMessage,\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post('http://localhost:5000/api/messages', message);\r\n      setMessages([...messages, res.data]);\r\n      setNewMessage('');\r\n      \r\n      // Refresh conversations to update last message\r\n      const conversationsRes = await axios.get(`http://localhost:5000/api/conversations/${currentUser.email}`);\r\n      setConversations(conversationsRes.data);\r\n    } catch (err) {\r\n      console.error('Error sending message:', err);\r\n    }\r\n  };\r\n\r\n  const startNewConversation = async () => {\r\n    if (!selectedUser) return;\r\n\r\n    try {\r\n      const res = await axios.post('http://localhost:5000/api/conversations', {\r\n        members: [currentUser.email, selectedUser]\r\n      });\r\n      \r\n      setCurrentChat(res.data);\r\n      setShowNewChat(false);\r\n      setSelectedUser('');\r\n      \r\n      // Refresh conversations list\r\n      const conversationsRes = await axios.get(`http://localhost:5000/api/conversations/${currentUser.email}`);\r\n      setConversations(conversationsRes.data);\r\n    } catch (err) {\r\n      console.error('Error creating conversation:', err);\r\n    }\r\n  };\r\n\r\n  const getOtherMember = (conversation) => {\r\n    return conversation.members.find(member => member !== currentUser.email);\r\n  };\r\n\r\n  return (\r\n    <div className=\"messages\">\r\n      <div className=\"messages-menu\">\r\n        <div className=\"messages-menu-header\">\r\n          <h2>Messages</h2>\r\n        </div>\r\n        {loading ? (\r\n          <div className=\"messages-loading\">Loading conversations...</div>\r\n        ) : (\r\n          <div className=\"conversations-list\">\r\n            {conversations.map((conv) => (\r\n              <div\r\n                key={conv._id}\r\n                className={`conversation-item ${currentChat?._id === conv._id ? 'active' : ''}`}\r\n                onClick={() => setCurrentChat(conv)}\r\n              >\r\n                <div className=\"conversation-name\">\r\n                  {conv.members.find(member => member !== currentUser.email)}\r\n                </div>\r\n                <div className=\"conversation-preview\">\r\n                  {conv.lastMessage || 'No messages yet'}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"messages-chat\">\r\n        {currentChat ? (\r\n          <>\r\n            <div className=\"chat-header\">\r\n              <h3>{currentChat.members.find(member => member !== currentUser.email)}</h3>\r\n            </div>\r\n            <div className=\"chat-messages\">\r\n              {messages.map((message) => (\r\n                <div\r\n                  ref={scrollRef}\r\n                  key={message._id}\r\n                  className={`message ${message.sender === currentUser.email ? 'own' : ''}`}\r\n                >\r\n                  <div className=\"message-content\">\r\n                    <p>{message.text}</p>\r\n                    <span className=\"message-time\">\r\n                      {new Date(message.createdAt).toLocaleTimeString()}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <form className=\"chat-input-container\" onSubmit={handleSubmit}>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type a message...\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n                className=\"chat-input\"\r\n              />\r\n              <button type=\"submit\" className=\"send-button\">\r\n                Send\r\n              </button>\r\n            </form>\r\n          </>\r\n        ) : (\r\n          <div className=\"no-chat-selected\">\r\n            <p>Select a conversation to start messaging</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Messages;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}